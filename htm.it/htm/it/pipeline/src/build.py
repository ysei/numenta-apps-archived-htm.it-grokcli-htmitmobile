#!/usr/bin/env python
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

import argparse
import json
import os

from htm.it.pipeline.utils import build_commands as builder
from htm.it.pipeline.utils import getGithubUserName
from htm.it.pipeline.utils.helpers import checkIfSaneProductionParams
from infrastructure.utilities import git
from infrastructure.utilities import diagnostics
from infrastructure.utilities.env import prepareEnv
from infrastructure.utilities.path import changeToWorkingDir


def getDeployTrack(htmitRemote, htmitBranch):
  """
    This method gives us the deployTrack, depending upon parameters
    (basically checks if production parameters or not).

    :param htmitRemote: URL for HTM-IT remote repository
    :param htmitBranch:  HTM-IT branch used for current build

    :returns: A `string` representing the deployment track
    e.g.
    1)
    htmitRemote: git@github.com:<user-name>/numenta-apps.git
    deployTrack: <user-name>-numenta
    2)
    htmitRemote: git@github.com:Numenta/numenta-apps.git
    deployTrack: numenta

    :rtype: string
  """
  if checkIfSaneProductionParams(htmitRemote, htmitBranch):
    return "numenta"
  else:
    return getGithubUserName(htmitRemote) + "-numenta"


def preBuildSetup(env, pipelineConfig):
  """
    Clone the HTM-IT repo if needed and get it set to the right remote, branch,
    and SHA.

    :param env: The environment variable which is set before building
    :param pipelineConfig: dict of the pipeline config values, e.g.:
      {
        "buildWorkspace": "/path/to/build/in",
        "htmitRemote": "git@github.com:Numenta/numenta-apps.git",
        "htmitBranch": "main",
        "htmItSha": "HEAD",
        "pipelineParams": "{dict of parameters}",
        "pipelineJson": "/path/to/json/file"
      }

    :returns: The updated pipelineConfig dict
    :rtype: dict
  """
  diagnostics.printEnv(env=env, logger=g_logger)

  # Clone HTM-IT if needed, otherwise, setup remote
  with changeToWorkingDir(pipelineConfig["buildWorkspace"]):
    if not os.path.isdir(env["HTM_IT_HOME"]):
      git.clone(gitURL=pipelineConfig["htmitRemote"],
                logger=g_logger)

  with changeToWorkingDir(env["HTM_IT_HOME"]):
    if pipelineConfig["htmItSha"]:
      g_logger.debug("Resetting to %s", pipelineConfig["htmItSha"])
      git.resetHard(sha=pipelineConfig["htmItSha"], logger=g_logger)
    else:
      htmItSha = git.getShaFromRemoteBranch(pipelineConfig["htmitRemote"],
                                           pipelineConfig["htmitBranch"],
                                           logger=g_logger)
      pipelineConfig["htmItSha"] = htmItSha
      g_logger.debug("Resetting to %s", htmItSha)
      git.resetHard(sha=htmItSha, logger=g_logger)


def addAndParseArgs(jsonArgs):
  """
    Parse the command line arguments or a json blog containing the required
    values.

    :returns: A dict of the parameters needed, as follows:
      {
        "buildWorkspace": "/path/to/build/in",
        "htmitRemote": "git@github.com:Numenta/numenta-apps.git",
        "htmitBranch": "main",
        "htmItSha": "HEAD",
        "pipelineParams": "{dict of parameters}",
        "pipelineJson": "/path/to/json/file"
      }

    :rtype: dict

    :raises parser.error in case wrong combination of arguments or arguments
      are missing.
  """
  parser = argparse.ArgumentParser(description="build tool for HTM-IT")
  parser.add_argument("--pipeline-json", dest="pipelineJson", type=str,
                      help="The JSON file generated by manifest tool.")
  parser.add_argument("--build-workspace", dest="buildWorkspace", type=str,
                      help="Common dir prefix for HTM-IT")
  parser.add_argument("--htm-it-remote", dest="htmitRemote", type=str,
                      help="The htm-it remote you want to use, e.g.,  "
                           "git@github.com:Numenta/numenta-apps.git")
  parser.add_argument("--htm-it-sha", dest="htmItSha", type=str,
                      help="HTM-IT SHA that will be built")
  parser.add_argument("--htm-it-branch", dest="htmitBranch", type=str,
                      help="The branch you are building from")
  parser.add_argument("--release-version", dest="releaseVersion", type=str,
                      help="Current release version, this will be used as base"
                           "version for htm-it and tracking rpm")
  parser.add_argument("--log", dest="logLevel", type=str, default="warning",
                      help="Logging level, by default it takes warning")

  args = {}
  if jsonArgs:
    args = jsonArgs
  else:
    args = vars(parser.parse_args())

  global g_logger
  g_logger = diagnostics.initPipelineLogger(name="build",
                                            logLevel=args["logLevel"])
  saneParams = {k:v for k, v in args.items() if v is not None}
  del saneParams["logLevel"]

  if "pipelineJson" in saneParams and len(saneParams) > 1:
    errorMessage = "Please provide parameters via JSON file or commandline"
    parser.error(errorMessage)

  if "pipelineJson" in saneParams:
    with open(args["pipelineJson"]) as paramFile:
      pipelineParams = json.load(paramFile)
  else:
    pipelineParams = saneParams

  # Setup defaults
  pipelineConfig = {
    "buildWorkspace": None,
    "htmitRemote": "git@github.com:Numenta/numenta-apps.git",
    "htmitBranch": "main",
    "htmItSha": "HEAD",
    "pipelineParams": pipelineParams,
    "pipelineJson": None
  }

  pipelineConfig["buildWorkspace"] = os.environ.get("BUILD_WORKSPACE",
                    pipelineParams.get("buildWorkspace",
                      pipelineParams.get("manifest", {}).get("buildWorkspace")))
  if not pipelineConfig["buildWorkspace"]:
    parser.error("You must set a BUILD_WORKSPACE environment variable "
                 "or pass the --build-workspace argument via the command line "
                 "or json file.")

  pipelineConfig["htmitRemote"] = pipelineParams.get("htmitRemote",
                          pipelineParams.get("manifest", {}).get("htmitRemote"))
  pipelineConfig["htmitBranch"] = pipelineParams.get("htmitBranch",
                          pipelineParams.get("manifest", {}).get("htmitBranch"))
  pipelineConfig["htmItSha"] = pipelineParams.get("htmItSha",
                          pipelineParams.get("manifest", {}).get("htmItSha"))

  pipelineConfig["pipelineJson"] = args["pipelineJson"]

  return pipelineConfig



def main(jsonArgs):
  """
    Main function.

    :param jsonArgs: dict of pipeline-json and logLevel, defaults to empty
      dict to make the script work independently and via driver scripts.
      e.g. {"pipelineJson" : <PIPELINE_JSON_PATH>,
            "logLevel" : <LOG_LEVEL>}

    :param jsonArgs: dict of  pipeline-json and logLevel
      e.g. {"pipelineJson" : <PIPELINE_JSON_PATH>,
            "logLevel" : <LOG_LEVEL>}
  """
  try:
    pipelineConfig = addAndParseArgs(jsonArgs)

    htmitUser = getGithubUserName(pipelineConfig["htmitRemote"])
    amiName = (htmitUser + "-" + pipelineConfig["htmitBranch"])
    env = prepareEnv(pipelineConfig["buildWorkspace"], None, os.environ)

    preBuildSetup(env, pipelineConfig)

    builder.buildHtmIt(env, pipelineConfig, g_logger)
    g_logger.debug("HTM-IT built successfully!")

    deployTrack = getDeployTrack(pipelineConfig["htmitRemote"],
                                 pipelineConfig["htmitBranch"])

    pipelineConfig["pipelineParams"]["build"] = {
                              "htmItSha": pipelineConfig["htmItSha"],
                              "htm-itHome": env["HTM_IT_HOME"],
                              "deployTrack": deployTrack,
                              "htmItDeployTrack": htmitUser,
                              "amiName": amiName
                            }
    g_logger.debug(pipelineConfig["pipelineParams"])
    if pipelineConfig["pipelineJson"]:
      with open(pipelineConfig["pipelineJson"], 'w') as jsonFile:
        jsonFile.write(json.dumps(pipelineConfig["pipelineParams"],
                       ensure_ascii=False))
  except Exception:
    g_logger.exception("Unknown error occurred in build phase")
    raise



if __name__ == "__main__":
  main({})
